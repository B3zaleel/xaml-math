//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 7.0.8.6004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace WpfMath
{
    public partial class DelimiterMappingNotFoundException : System.Exception
    {
        internal DelimiterMappingNotFoundException() { }
    }
    public static partial class Extensions
    {
        public static byte[] RenderToPng(this WpfMath.TexFormula texForm, double scale, double x, double y, string systemTextFontName) { throw null; }
    }
    public partial class FormulaNotFoundException : System.Exception
    {
        internal FormulaNotFoundException() { }
    }
    public enum MatrixCellAlignment
    {
        Left = 0,
        Center = 1,
    }
    public partial class SourceSpan : System.IEquatable<WpfMath.SourceSpan>
    {
        public SourceSpan(string source, int start, int length) { }
        public int End { get { throw null; } }
        public char this[int index] { get { throw null; } }
        public int Length { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string Source { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public int Start { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(WpfMath.SourceSpan other) { throw null; }
        public override int GetHashCode() { throw null; }
        public WpfMath.SourceSpan Segment(int start) { throw null; }
        public WpfMath.SourceSpan Segment(int start, int length) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class SymbolMappingNotFoundException : System.Exception
    {
        internal SymbolMappingNotFoundException() { }
    }
    public partial class SymbolNotFoundException : System.Exception
    {
        internal SymbolNotFoundException() { }
    }
    public enum TexAlignment
    {
        Left = 0,
        Right = 1,
        Center = 2,
        Top = 3,
        Bottom = 4,
    }
    public enum TexAtomType
    {
        None = -1,
        Ordinary = 0,
        BigOperator = 1,
        BinaryOperator = 2,
        Relation = 3,
        Opening = 4,
        Closing = 5,
        Punctuation = 6,
        Inner = 7,
        Accent = 10,
    }
    public enum TexDelimeterType
    {
        Over = 0,
        Under = 1,
    }
    public enum TexDelimiter
    {
        Brace = 0,
        Parenthesis = 1,
        Bracket = 2,
        LeftArrow = 3,
        RightArrow = 4,
        LeftRightArrow = 5,
        DoubleLeftArrow = 6,
        DoubleRightArrow = 7,
        DoubleLeftRightArrow = 8,
        SingleLine = 9,
        DoubleLine = 10,
    }
    public sealed partial class TexFormula
    {
        public TexFormula() { }
        public string TextStyle { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public void Add(WpfMath.TexFormula formula, WpfMath.SourceSpan source = null) { }
        public WpfMath.TexRenderer GetRenderer(WpfMath.TexStyle style, double scale, string systemTextFontName) { throw null; }
        public void SetBackground(WpfMath.Utils.IPlatformBrush brush) { }
        public void SetForeground(WpfMath.Utils.IPlatformBrush brush) { }
    }
    public partial class TexFormulaParser
    {
        public TexFormulaParser() { }
        public TexFormulaParser(System.Collections.Generic.IReadOnlyDictionary<string, WpfMath.Colors.IColorParser> colorModelParsers, WpfMath.Colors.IColorParser defaultColorParser) { }
        public WpfMath.TexFormula Parse(string value, string textStyle = null) { throw null; }
    }
    public partial class TexRenderer
    {
        internal TexRenderer() { }
        public double Baseline { get { throw null; } }
        public WpfMath.Boxes.Box Box { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Windows.Size RenderSize { get { throw null; } }
        public double Scale { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public void Render(System.Windows.Media.DrawingContext drawingContext, double x, double y) { }
        public void RenderFormulaTo(WpfMath.Rendering.IElementRenderer renderer, double x, double y) { }
        public System.Windows.Media.Imaging.BitmapSource RenderToBitmap(double x, double y) { throw null; }
        public System.Windows.Media.Imaging.BitmapSource RenderToBitmap(double x, double y, double dpi) { throw null; }
        public System.Windows.Media.Geometry RenderToGeometry(double x, double y) { throw null; }
    }
    public enum TexStyle
    {
        Display = 0,
        Text = 2,
        Script = 4,
        ScriptScript = 6,
    }
    public enum TexUnit
    {
        Em = 0,
        Ex = 1,
        Pixel = 2,
        Point = 3,
        Pica = 4,
        Mu = 5,
    }
}
namespace WpfMath.Boxes
{
    public abstract partial class Box
    {
        protected Box() { }
        protected Box(WpfMath.Utils.IPlatformBrush foreground, WpfMath.Utils.IPlatformBrush background) { }
        public WpfMath.Utils.IPlatformBrush Background { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Collections.ObjectModel.ReadOnlyCollection<WpfMath.Boxes.Box> Children { get { throw null; } }
        public double Depth { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public WpfMath.Utils.IPlatformBrush Foreground { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public double Height { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public double Italic { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public double Shift { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public WpfMath.SourceSpan Source { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public double TotalHeight { get { throw null; } }
        public double TotalWidth { get { throw null; } }
        public double Width { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public virtual void Add(int position, WpfMath.Boxes.Box box) { }
        public virtual void Add(WpfMath.Boxes.Box box) { }
        public abstract int GetLastFontId();
        public abstract void RenderTo(WpfMath.Rendering.IElementRenderer renderer, double x, double y);
    }
}
namespace WpfMath.Colors
{
    public abstract partial class FixedComponentCountColorParser : WpfMath.Colors.IColorParser
    {
        protected FixedComponentCountColorParser(int componentCount) { }
        public WpfMath.Colors.RgbaColor? Parse(System.Collections.Generic.IReadOnlyList<string> components) { throw null; }
        protected abstract WpfMath.Colors.RgbaColor? ParseComponents(System.Collections.Generic.IReadOnlyList<string> components);
    }
    public partial interface IColorParser
    {
        WpfMath.Colors.RgbaColor? Parse(System.Collections.Generic.IReadOnlyList<string> components);
    }
    public partial class PredefinedColorParser : WpfMath.Colors.IColorParser
    {
        internal PredefinedColorParser() { }
        public static readonly WpfMath.Colors.PredefinedColorParser Instance;
        public WpfMath.Colors.RgbaColor? Parse(System.Collections.Generic.IReadOnlyList<string> components) { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct RgbaColor
    {
        private object _dummy;
        private int _dummyPrimitive;
        public RgbaColor(byte r, byte g, byte b, byte a = (byte)255) { throw null; }
        public byte A { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public byte B { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public byte G { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public byte R { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public static partial class StandardColorParsers
    {
        public static System.Collections.Generic.IReadOnlyDictionary<string, WpfMath.Colors.IColorParser> Dictionary;
    }
}
namespace WpfMath.Controls
{
    public partial class FormulaControl : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector
    {
        public static readonly System.Windows.DependencyProperty ErrorsProperty;
        public static readonly System.Windows.DependencyProperty ErrorTemplateProperty;
        public static readonly System.Windows.DependencyProperty FormulaProperty;
        public static readonly System.Windows.DependencyProperty HasErrorProperty;
        public static readonly System.Windows.DependencyProperty ScaleProperty;
        public static readonly System.Windows.DependencyProperty SelectionBrushProperty;
        public static readonly System.Windows.DependencyProperty SelectionLengthProperty;
        public static readonly System.Windows.DependencyProperty SelectionStartProperty;
        public static readonly System.Windows.DependencyProperty SystemTextFontNameProperty;
        public FormulaControl() { }
        public System.Collections.ObjectModel.ObservableCollection<System.Exception> Errors { get { throw null; } }
        public System.Windows.Controls.ControlTemplate ErrorTemplate { get { throw null; } set { } }
        public string Formula { get { throw null; } set { } }
        public bool HasError { get { throw null; } }
        public double Scale { get { throw null; } set { } }
        public System.Windows.Media.Brush SelectionBrush { get { throw null; } set { } }
        public int SelectionLength { get { throw null; } set { } }
        public int SelectionStart { get { throw null; } set { } }
        public string SystemTextFontName { get { throw null; } set { } }
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "5.0.6.0")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void InitializeComponent() { }
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "5.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(1)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) { }
    }
    public partial class VisualContainerElement : System.Windows.FrameworkElement
    {
        public VisualContainerElement() { }
        public System.Windows.Media.DrawingVisual Visual { get { throw null; } set { } }
        protected override int VisualChildrenCount { get { throw null; } }
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size finalSize) { throw null; }
        protected override System.Windows.Media.Visual GetVisualChild(int index) { throw null; }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size availableSize) { throw null; }
        protected override void OnVisualChildrenChanged(System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved) { }
    }
}
namespace WpfMath.Converters
{
    public partial class SVGConverter
    {
        public SVGConverter() { }
        public string ConvertGeometry(System.Windows.Media.Geometry geometry) { throw null; }
    }
}
namespace WpfMath.Exceptions
{
    public partial class TexCharacterMappingNotFoundException : WpfMath.Exceptions.TexException
    {
        public TexCharacterMappingNotFoundException(string message) { }
    }
    public abstract partial class TexException : System.Exception
    {
        public TexException() { }
        public TexException(string message) { }
        public TexException(string message, System.Exception innerException) { }
    }
    public partial class TexNotSupportedException : WpfMath.Exceptions.TexException
    {
        public TexNotSupportedException(string message) { }
    }
    public partial class TexParseException : WpfMath.Exceptions.TexException
    {
        internal TexParseException() { }
    }
    public partial class TextStyleMappingNotFoundException : WpfMath.Exceptions.TexException
    {
        internal TextStyleMappingNotFoundException() { }
    }
    public partial class TypeFaceNotFoundException : WpfMath.Exceptions.TexException
    {
        public TypeFaceNotFoundException(string message) { }
    }
}
namespace WpfMath.Rendering
{
    public partial class GeometryElementRenderer : WpfMath.Rendering.IElementRenderer
    {
        public GeometryElementRenderer(System.Windows.Media.GeometryGroup geometry, double scale) { }
        public void FinishRendering() { }
        public void RenderElement(WpfMath.Boxes.Box box, double x, double y) { }
        public void RenderGlyphRun(System.Func<double, System.Windows.Media.GlyphRun> scaledGlyphFactory, double x, double y, System.Windows.Media.Brush foreground) { }
        public void RenderRectangle(System.Windows.Rect rectangle, System.Windows.Media.Brush foreground) { }
        public void RenderTransformed(WpfMath.Boxes.Box box, WpfMath.Rendering.Transformations.Transformation[] transforms, double x, double y) { }
    }
    public partial interface IElementRenderer
    {
        void FinishRendering();
        void RenderElement(WpfMath.Boxes.Box box, double x, double y);
        void RenderGlyphRun(System.Func<double, System.Windows.Media.GlyphRun> scaledGlyphFactory, double x, double y, System.Windows.Media.Brush foreground);
        void RenderRectangle(System.Windows.Rect rectangle, System.Windows.Media.Brush foreground);
        void RenderTransformed(WpfMath.Boxes.Box box, WpfMath.Rendering.Transformations.Transformation[] transforms, double x, double y);
    }
}
namespace WpfMath.Rendering.Transformations
{
    public abstract partial class Transformation
    {
        internal Transformation() { }
        public abstract WpfMath.Rendering.Transformations.TransformationKind Kind { get; }
        public abstract WpfMath.Rendering.Transformations.Transformation Scale(double scale);
        public partial class Rotate : WpfMath.Rendering.Transformations.Transformation
        {
            public Rotate(double rotationDegrees) { }
            public override WpfMath.Rendering.Transformations.TransformationKind Kind { get { throw null; } }
            public double RotationDegrees { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
            public override WpfMath.Rendering.Transformations.Transformation Scale(double scale) { throw null; }
        }
        public partial class Translate : WpfMath.Rendering.Transformations.Transformation
        {
            public Translate(double x, double y) { }
            public override WpfMath.Rendering.Transformations.TransformationKind Kind { get { throw null; } }
            public double X { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
            public double Y { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
            public override WpfMath.Rendering.Transformations.Transformation Scale(double scale) { throw null; }
        }
    }
    public enum TransformationKind
    {
        Translate = 0,
        Rotate = 1,
    }
}
namespace WpfMath.Utils
{
    public partial class GenericPlatformBrush<TBrush> : WpfMath.Utils.IPlatformBrush
    {
        public GenericPlatformBrush(TBrush brush) { }
        public TBrush Get() { throw null; }
    }
    public partial interface IPlatformBrush
    {
    }
}
namespace XamlGeneratedNamespace
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "5.0.6.0")]
    [System.ComponentModel.EditorBrowsableAttribute(1)]
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public sealed partial class GeneratedInternalTypeHelper : System.Windows.Markup.InternalTypeHelper
    {
        public GeneratedInternalTypeHelper() { }
        protected override void AddEventHandler(System.Reflection.EventInfo eventInfo, object target, System.Delegate handler) { }
        protected override System.Delegate CreateDelegate(System.Type delegateType, object target, string handler) { throw null; }
        protected override object CreateInstance(System.Type type, System.Globalization.CultureInfo culture) { throw null; }
        protected override object GetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture) { throw null; }
        protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) { }
    }
}
